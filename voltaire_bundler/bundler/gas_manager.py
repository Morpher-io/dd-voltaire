import asyncio
from functools import reduce
import math
from typing import Any
from eth_abi import encode, decode

from eth_utils import keccak

from voltaire_bundler.user_operation.user_operation import UserOperation
from voltaire_bundler.user_operation.user_operation_handler import (
    UserOperationHandler,
)

from voltaire_bundler.bundler.exceptions import (
    ExecutionException,
    ExecutionExceptionCode,
    MethodNotFoundException,
    ValidationException,
    ValidationExceptionCode,
)
from voltaire_bundler.utils.eth_client_utils import (
    send_rpc_request_to_eth_client,
    get_latest_block_info
)
from voltaire_bundler.utils.decode import (
    decode_ExecutionResult,
    decode_FailedOp_event,
    decode_gasEstimateL1Component_result,
)

from voltaire_bundler.utils.encode import (
    encode_handleops_calldata,
    encode_gasEstimateL1Component_calldata,
)

ZERO_ADDRESS = "0x0000000000000000000000000000000000000000"
MIN_CALL_GAS_LIMIT = 21_000

class GasManager:
    ethereum_node_url: str
    chain_id: str
    is_legacy_mode: bool
    max_fee_per_gas_percentage_multiplier: int
    max_priority_fee_per_gas_percentage_multiplier: int
    estimate_gas_with_override_enabled: bool
    max_verification_gas: int
    max_call_data_gas: int

    def __init__(
        self, 
        ethereum_node_url, 
        chain_id, 
        is_legacy_mode,
        max_fee_per_gas_percentage_multiplier: int,
        max_priority_fee_per_gas_percentage_multiplier: int,
        max_verification_gas,
        max_call_data_gas,
    ):
        self.ethereum_node_url = ethereum_node_url
        self.chain_id = chain_id
        self.is_legacy_mode = is_legacy_mode
        self.max_fee_per_gas_percentage_multiplier = max_fee_per_gas_percentage_multiplier
        self.max_priority_fee_per_gas_percentage_multiplier = max_priority_fee_per_gas_percentage_multiplier
        self.estimate_gas_with_override_enabled = True
        self.max_verification_gas = max_verification_gas
        self.max_call_data_gas = max_call_data_gas

    async def estimate_callgaslimit_and_preverificationgas_and_verificationgas(
        self, 
        user_operation: UserOperation,
        entrypoint:str,
        state_override_set_dict:dict[str, Any]
    ) -> [str, str, str]:
        # calculate preverification_gas
        preverification_gas = await self.get_preverification_gas(
            user_operation, entrypoint,
        )
        preverification_gas_hex = hex(preverification_gas)
        user_operation.pre_verification_gas = preverification_gas

        # set verification_gas_limit to self.max_verification_gas to prevent out of gas revert
        user_operation.verification_gas_limit = self.max_verification_gas

        call_gas_limit, verification_gas = await self.estimate_call_gas_and_verificationgas_limit(
            user_operation,
            entrypoint,
            state_override_set_dict,
        )
        return (
            hex(call_gas_limit),
            preverification_gas_hex,
            hex(verification_gas),
        )
    
    async def estimate_call_gas_and_verificationgas_limit(
        self,
        user_operation:UserOperation,
        entrypoint:str,
        state_override_set_dict:dict[str, Any],
    ) -> tuple[int,int]:
        min_gas = 0
        max_gas = self.max_call_data_gas
        is_continious = False
        while True:
            solidity_error, failed_op_params_res = await self.simulate_handle_op_mod(
                    user_operation, 
                    entrypoint, 
                    min_gas, 
                    max_gas, 
                    is_continious,
                    state_override_set_dict,
            )
            if(solidity_error[:10] == "0x3a803a81"):#success
                return failed_op_params_res[3], failed_op_params_res[0]
            elif(solidity_error[:10] == "0x22cf94e6"):#continue
                if failed_op_params_res[2] > 30:
                    break
                min_gas = failed_op_params_res[0]
                max_gas = failed_op_params_res[1]
                is_continious = True
            elif(solidity_error[:10] == "0x59f233d2"):
                errorMessage = failed_op_params_res[0]
                raise ExecutionException(
                    ExecutionExceptionCode.EXECUTION_REVERTED,
                    errorMessage
                )

        raise ValueError("Gas estimation failed")

    async def simulate_handle_op_mod(
        self,
        user_operation: UserOperation,
        entrypoint:str,
        min_gas:int,
        max_gas:int,
        is_continious:bool,
        state_override_set_dict: dict[str, Any],
    ):
        # simulateHandleOp(entrypoint solidity function) will always revert
        function_selector = "0x433c9308"
        params = encode(
            [
                "(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)",  # useroperation
                "(uint256,uint256,uint256,bool)"
            ],
            [user_operation.to_list(), [min_gas, max_gas, 10_000, is_continious]],
        )
        
        call_data = function_selector + params.hex()

        default_state_overrides: dict[str,Any] = {
            # override the zero address balance with a high value as it is the "from"
            ZERO_ADDRESS: {
                "balance": "0x314dc6448d9338c15b0a00000000"
            },
            entrypoint: { #override the Entrypoint with EntryPointMod
                "code": "0x6080604052600436106101395760003560e01c80638f41ec5a116100ab578063bb9fe6bf1161006f578063bb9fe6bf14610470578063c23a5cea14610485578063d25ca6ea146104a5578063d6383f94146104d4578063ee219423146104f4578063fc7e286d1461051457600080fd5b80638f41ec5a146103e8578063957122ab146103fd5780639b249f691461041d578063a61935311461043d578063b760faf91461045d57600080fd5b8063205c2878116100fd578063205c28781461020c57806335567e1a1461022c578063433c93081461024c5780634b1d7cf51461026c5780635287ce121461028c57806370a08231146103a957600080fd5b80630396cb601461014e5780630bd28e3b146101615780631b2e01b8146101815780631d732756146101cc5780631fad948c146101ec57600080fd5b3661014957610147336105c9565b005b600080fd5b61014761015c3660046134ec565b610630565b34801561016d57600080fd5b5061014761017c36600461352e565b6108bf565b34801561018d57600080fd5b506101b961019c366004613569565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b3480156101d857600080fd5b506101b96101e7366004613763565b6108f6565b3480156101f857600080fd5b5061014761020736600461386c565b610a69565b34801561021857600080fd5b506101476102273660046138c2565b610be5565b34801561023857600080fd5b506101b9610247366004613569565b610d61565b34801561025857600080fd5b50610147610267366004613907565b610da7565b34801561027857600080fd5b5061014761028736600461386c565b610fab565b34801561029857600080fd5b506103516102a7366004613960565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b031660009081526020818152604091829020825160a08101845281546001600160701b038082168352600160701b820460ff16151594830194909452600160781b90049092169282019290925260019091015463ffffffff81166060830152640100000000900465ffffffffffff16608082015290565b6040805182516001600160701b03908116825260208085015115159083015283830151169181019190915260608083015163ffffffff169082015260809182015165ffffffffffff169181019190915260a0016101c3565b3480156103b557600080fd5b506101b96103c4366004613960565b6001600160a01b03166000908152602081905260409020546001600160701b031690565b3480156103f457600080fd5b506101b9600181565b34801561040957600080fd5b5061014761041836600461397d565b6113c7565b34801561042957600080fd5b50610147610438366004613a01565b6114c4565b34801561044957600080fd5b506101b9610458366004613a42565b61157f565b61014761046b366004613960565b6105c9565b34801561047c57600080fd5b506101476115c1565b34801561049157600080fd5b506101476104a0366004613960565b6116ea565b3480156104b157600080fd5b506104c56104c0366004613a76565b611922565b6040516101c393929190613b21565b3480156104e057600080fd5b506101476104ef366004613b4b565b6119dc565b34801561050057600080fd5b5061014761050f366004613a42565b611ad7565b34801561052057600080fd5b5061058361052f366004613960565b600060208190529081526040902080546001909101546001600160701b0380831692600160701b810460ff1692600160781b9091049091169063ffffffff811690640100000000900465ffffffffffff1685565b604080516001600160701b0396871681529415156020860152929094169183019190915263ffffffff16606082015265ffffffffffff909116608082015260a0016101c3565b6105d38134611cb3565b6001600160a01b03811660008181526020818152604091829020805492516001600160701b03909316835292917f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c491015b60405180910390a25050565b33600090815260208190526040902063ffffffff82166106975760405162461bcd60e51b815260206004820152601a60248201527f6d757374207370656369667920756e7374616b652064656c617900000000000060448201526064015b60405180910390fd5b600181015463ffffffff90811690831610156106f55760405162461bcd60e51b815260206004820152601c60248201527f63616e6e6f7420646563726561736520756e7374616b652074696d6500000000604482015260640161068e565b8054600090610715903490600160781b90046001600160701b0316613bc2565b90506000811161075c5760405162461bcd60e51b81526020600482015260126024820152711b9bc81cdd185ad9481cdc1958da599a595960721b604482015260640161068e565b6001600160701b038111156107a45760405162461bcd60e51b815260206004820152600e60248201526d7374616b65206f766572666c6f7760901b604482015260640161068e565b6040805160a08101825283546001600160701b0390811682526001602080840182815286841685870190815263ffffffff808b16606088019081526000608089018181523380835296829052908a902098518954955194518916600160781b02600160781b600160e81b0319951515600160701b026effffffffffffffffffffffffffffff199097169190991617949094179290921695909517865551949092018054925165ffffffffffff166401000000000269ffffffffffffffffffff19909316949093169390931717905590517fa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01906108b2908490879091825263ffffffff16602082015260400190565b60405180910390a2505050565b3360009081526001602090815260408083206001600160c01b038516845290915281208054916108ee83613bd5565b919050555050565b6000805a905033301461094b5760405162461bcd60e51b815260206004820152601760248201527f4141393220696e7465726e616c2063616c6c206f6e6c79000000000000000000604482015260640161068e565b8451604081015160608201518101611388015a10156109755763deaddead60e01b60005260206000fd5b875160009015610a09576000610992846000015160008c86611d4f565b905080610a075760006109a6610800611d67565b805190915015610a015784600001516001600160a01b03168a602001517f1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a2018760200151846040516109f8929190613bee565b60405180910390a35b60019250505b505b600088608001515a8603019050610a5b6000838b8b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250889250611d93915050565b9a9950505050505050505050565b610a7161208a565b816000816001600160401b03811115610a8c57610a8c61359e565b604051908082528060200260200182016040528015610ac557816020015b610ab2613462565b815260200190600190039081610aaa5790505b50905060005b82811015610b3e576000828281518110610ae757610ae7613c07565b60200260200101519050600080610b22848a8a87818110610b0a57610b0a613c07565b9050602002810190610b1c9190613c1d565b856120e1565b91509150610b3384838360006122cc565b505050600101610acb565b506040516000907fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972908290a160005b83811015610bc857610bbc81888884818110610b8b57610b8b613c07565b9050602002810190610b9d9190613c1d565b858481518110610baf57610baf613c07565b6020026020010151612468565b90910190600101610b6d565b50610bd3848261258f565b505050610be06001600255565b505050565b33600090815260208190526040902080546001600160701b0316821115610c4e5760405162461bcd60e51b815260206004820152601960248201527f576974686472617720616d6f756e7420746f6f206c6172676500000000000000604482015260640161068e565b8054610c649083906001600160701b0316613c3e565b81546001600160701b0319166001600160701b0391909116178155604080516001600160a01b03851681526020810184905233917fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb910160405180910390a26000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610d10576040519150601f19603f3d011682016040523d82523d6000602084013e610d15565b606091505b5050905080610d5b5760405162461bcd60e51b81526020600482015260126024820152716661696c656420746f20776974686472617760701b604482015260640161068e565b50505050565b6001600160a01b03821660009081526001602090815260408083206001600160c01b038516845290915290819020549082901b67ffffffffffffffff1916175b92915050565b610daf613462565b610db883612688565b600080610dc7600086856120e1565b915091506000610dd78383612762565b9050843560208601356000610df26080890160608a01613c5f565b610e4b5760008080610e1d610e0a60208e018e613960565b610e1760608f018f613c7c565b8861282e565b92509250925082610e435780604051632cf919e960e11b815260040161068e9190613cc2565b509350839150505b60006005610e598585613c3e565b610e639190613cd5565b610e6d9085613bc2565b905060005b83610e8160408c013587613bc2565b1015610f4d5780610e9181613bd5565b915050610e9d8261292a565b610ecb57604051631167ca7360e11b815260048101869052602481018590526044810182905260640161068e565b600080610ef4610ede60208f018f613960565b8e8060600190610eee9190613c7c565b8761282e565b5091509150818015610f065750848110155b15610f1657839550809450610f24565b610f21846001613bc2565b96505b6002610f308888613c3e565b610f3a9190613cd5565b610f449088613bc2565b93505050610e72565b8a60c001358960800151610f619190613c3e565b60208701516040808901519051633a803a8160e01b8152600481019390935265ffffffffffff9182166024840152166044820152606481018590526084810182905260a40161068e565b610fb361208a565b816000805b828110156111205736868683818110610fd357610fd3613c07565b9050602002810190610fe59190613cf7565b9050366000610ff48380613d0d565b9092509050600061100b6040850160208601613960565b90506000196001600160a01b038216016110675760405162461bcd60e51b815260206004820152601760248201527f4141393620696e76616c69642061676772656761746f72000000000000000000604482015260640161068e565b6001600160a01b03811615611104576001600160a01b03811663e3563a4f84846110946040890189613c7c565b6040518563ffffffff1660e01b81526004016110b39493929190613ebb565b60006040518083038186803b1580156110cb57600080fd5b505afa9250505080156110dc575060015b6111045760405163086a9f7560e41b81526001600160a01b038216600482015260240161068e565b61110e8287613bc2565b95505060019093019250610fb8915050565b506000816001600160401b0381111561113b5761113b61359e565b60405190808252806020026020018201604052801561117457816020015b611161613462565b8152602001906001900390816111595790505b506040519091507fbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f97290600090a16000805b8481101561127b57368888838181106111c0576111c0613c07565b90506020028101906111d29190613cf7565b90503660006111e18380613d0d565b909250905060006111f86040850160208601613960565b90508160005b8181101561126957600089898151811061121a5761121a613c07565b6020026020010151905060008061123d8b898987818110610b0a57610b0a613c07565b9150915061124d848383896122cc565b8a61125781613bd5565b9b5050600190930192506111fe915050565b5050600190940193506111a592505050565b50600080915060005b85811015611382573689898381811061129f5761129f613c07565b90506020028101906112b19190613cf7565b90506112c36040820160208301613960565b6001600160a01b03167f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d60405160405180910390a23660006113058380613d0d565b90925090508060005b81811015611371576113508885858481811061132c5761132c613c07565b905060200281019061133e9190613c1d565b8b8b81518110610baf57610baf613c07565b61135a9088613bc2565b96508761136681613bd5565b98505060010161130e565b505060019093019250611284915050565b506040516000907f575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d908290a26113b8868261258f565b5050505050610be06001600255565b831580156113dd57506001600160a01b0383163b155b1561142a5760405162461bcd60e51b815260206004820152601960248201527f41413230206163636f756e74206e6f74206465706c6f79656400000000000000604482015260640161068e565b601481106114a25760006114416014828486613f38565b61144a91613f62565b60601c9050803b6000036114a05760405162461bcd60e51b815260206004820152601b60248201527f41413330207061796d6173746572206e6f74206465706c6f7965640000000000604482015260640161068e565b505b60405162461bcd60e51b8152602060048201526000602482015260440161068e565b604051632b870d1b60e11b81526000906001600160a01b037f0000000000000000000000003d2b7f2037de33ea755299cdeae7dc5e0039f1b3169063570e1a36906115159086908690600401613f97565b6020604051808303816000875af1158015611534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190613fab565b604051633653dc0360e11b81526001600160a01b038216600482015290915060240161068e565b600061158a82612959565b6040805160208101929092523090820152466060820152608001604051602081830303815290604052805190602001209050919050565b3360009081526020819052604081206001810154909163ffffffff909116900361161a5760405162461bcd60e51b815260206004820152600a6024820152691b9bdd081cdd185ad95960b21b604482015260640161068e565b8054600160701b900460ff166116665760405162461bcd60e51b8152602060048201526011602482015270616c726561647920756e7374616b696e6760781b604482015260640161068e565b600181015460009061167e9063ffffffff1642613fc8565b60018301805469ffffffffffff00000000191664010000000065ffffffffffff841690810291909117909155835460ff60701b1916845560405190815290915033907ffa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a90602001610624565b3360009081526020819052604090208054600160781b90046001600160701b03168061174f5760405162461bcd60e51b81526020600482015260146024820152734e6f207374616b6520746f20776974686472617760601b604482015260640161068e565b6001820154640100000000900465ffffffffffff166117b05760405162461bcd60e51b815260206004820152601d60248201527f6d7573742063616c6c20756e6c6f636b5374616b652829206669727374000000604482015260640161068e565b60018201544264010000000090910465ffffffffffff1611156118155760405162461bcd60e51b815260206004820152601b60248201527f5374616b65207769746864726177616c206973206e6f74206475650000000000604482015260640161068e565b60018201805469ffffffffffffffffffff191690558154600160781b600160e81b0319168255604080516001600160a01b03851681526020810183905233917fb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3910160405180910390a26000836001600160a01b03168260405160006040518083038185875af1925050503d80600081146118cc576040519150601f19603f3d011682016040523d82523d6000602084013e6118d1565b606091505b5050905080610d5b5760405162461bcd60e51b815260206004820152601860248201527f6661696c656420746f207769746864726177207374616b650000000000000000604482015260640161068e565b600080606060005a9050876001600160a01b0316858888604051611947929190613fee565b60006040518083038160008787f1925050503d8060008114611985576040519150601f19603f3d011682016040523d82523d6000602084013e61198a565b606091505b5090945091505a61199b9082613c3e565b92506000846119aa57826119bb565b604051806020016040528060008152505b905084848260405163f9bb41fb60e01b815260040161068e93929190613b21565b6119e4613462565b6119ed85612688565b6000806119fc600088856120e1565b915091506000611a0c8383612762565b9050611a1743600052565b6000611a2560008a87612468565b9050611a3043600052565b600060606001600160a01b038a1615611aa657896001600160a01b03168989604051611a5d929190613fee565b6000604051808303816000865af19150503d8060008114611a9a576040519150601f19603f3d011682016040523d82523d6000602084013e611a9f565b606091505b5090925090505b866080015183856020015186604001518585604051630116f59360e71b815260040161068e96959493929190613ffe565b611adf613462565b611ae882612688565b600080611af7600085856120e1565b915091506000611b0e846000015160a00151612972565b845151909150600090611b2090612972565b9050611b3f604051806040016040528060008152602001600081525090565b366000611b4f60408a018a613c7c565b909250905060006014821015611b66576000611b81565b611b74601460008486613f38565b611b7d91613f62565b60601c5b9050611b8c81612972565b93505050506000611b9d8686612762565b9050600081600001519050600060016001600160a01b0316826001600160a01b031614905060006040518060c001604052808b6080015181526020018b6040015181526020018315158152602001856020015165ffffffffffff168152602001856040015165ffffffffffff168152602001611c1a8c6060015190565b905290506001600160a01b03831615801590611c4057506001600160a01b038316600114155b15611c925760006040518060400160405280856001600160a01b03168152602001611c6a86612972565b81525090508187878a84604051633ebb2d3960e21b815260040161068e9594939291906140a0565b8086868960405163e0cff05f60e01b815260040161068e9493929190614120565b6001600160a01b03821660009081526020819052604081208054909190611ce49084906001600160701b0316613bc2565b90506001600160701b03811115611d305760405162461bcd60e51b815260206004820152601060248201526f6465706f736974206f766572666c6f7760801b604482015260640161068e565b81546001600160701b0319166001600160701b03919091161790555050565b6000806000845160208601878987f195945050505050565b60603d82811115611d755750815b604051602082018101604052818152816000602083013e9392505050565b6000805a855190915060009081611da9826129c1565b60a08301519091506001600160a01b038116611dc85782519350611f6f565b809350600088511115611f6f57868202955060028a6002811115611dee57611dee614173565b14611e6057606083015160405163a9a2340960e01b81526001600160a01b0383169163a9a2340991611e28908e908d908c90600401614189565b600060405180830381600088803b158015611e4257600080fd5b5087f1158015611e56573d6000803e3d6000fd5b5050505050611f6f565b606083015160405163a9a2340960e01b81526001600160a01b0383169163a9a2340991611e95908e908d908c90600401614189565b600060405180830381600088803b158015611eaf57600080fd5b5087f193505050508015611ec1575060015b611f6f57611ecd6141d0565b806308c379a003611f265750611ee16141ec565b80611eec5750611f28565b8b81604051602001611efe9190614275565b60408051601f1981840301815290829052631101335b60e11b825261068e9291600401613bee565b505b8a604051631101335b60e11b815260040161068e9181526040602082018190526012908201527110504d4c081c1bdcdd13dc081c995d995c9d60721b606082015260800190565b5a85038701965081870295508589604001511015611fd8578a604051631101335b60e11b815260040161068e91815260406020808301829052908201527f414135312070726566756e642062656c6f772061637475616c476173436f7374606082015260800190565b6040890151869003611fea8582611cb3565b6000808c6002811115611fff57611fff614173565b1490508460a001516001600160a01b031685600001516001600160a01b03168c602001517f49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f8860200151858d8f604051612072949392919093845291151560208401526040830152606082015260800190565b60405180910390a45050505050505095945050505050565b60028054036120db5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068e565b60028055565b60008060005a84519091506120f686826129f1565b6120ff8661157f565b6020860152604081015160608201516080830151171760e087013517610100870135176effffffffffffffffffffffffffffff8111156121815760405162461bcd60e51b815260206004820152601860248201527f41413934206761732076616c756573206f766572666c6f770000000000000000604482015260640161068e565b60008061218d84612aea565b905061219b8a8a8a84612b37565b855160208701519199509193506121b29190612d6f565b6122085789604051631101335b60e11b815260040161068e918152604060208201819052601a908201527f4141323520696e76616c6964206163636f756e74206e6f6e6365000000000000606082015260800190565b61221143600052565b60a08401516060906001600160a01b031615612239576122348b8b8b8587612dbc565b975090505b60005a87039050808b60a00135101561229e578b604051631101335b60e11b815260040161068e918152604060208201819052601e908201527f41413430206f76657220766572696669636174696f6e4761734c696d69740000606082015260800190565b60408a018390528160608b015260c08b01355a8803018a608001818152505050505050505050935093915050565b6000806122d885612fdf565b91509150816001600160a01b0316836001600160a01b03161461233e5785604051631101335b60e11b815260040161068e9181526040602082018190526014908201527320a0991a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b80156123965785604051631101335b60e11b815260040161068e9181526040602082018190526017908201527f414132322065787069726564206f72206e6f7420647565000000000000000000606082015260800190565b60006123a185612fdf565b925090506001600160a01b038116156123fd5786604051631101335b60e11b815260040161068e9181526040602082018190526014908201527320a0999a1039b4b3b730ba3ab9329032b93937b960611b606082015260800190565b811561245f5786604051631101335b60e11b815260040161068e9181526040602082018190526021908201527f41413332207061796d61737465722065787069726564206f72206e6f742064756060820152606560f81b608082015260a00190565b50505050505050565b6000805a9050600061247b846060015190565b905030631d7327566124906060880188613c7c565b87856040518563ffffffff1660e01b81526004016124b194939291906142b3565b6020604051808303816000875af19250505080156124ec575060408051601f3d908101601f191682019092526124e991810190614366565b60015b61258357600060206000803e50600051632152215360e01b810161254e5786604051631101335b60e11b815260040161068e918152604060208201819052600f908201526e41413935206f7574206f662067617360881b606082015260800190565b600085608001515a6125609086613c3e565b61256a9190613bc2565b905061257a886002888685611d93565b94505050612586565b92505b50509392505050565b6001600160a01b0382166125e55760405162461bcd60e51b815260206004820152601860248201527f4141393020696e76616c69642062656e65666963696172790000000000000000604482015260640161068e565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612632576040519150601f19603f3d011682016040523d82523d6000602084013e612637565b606091505b5050905080610be05760405162461bcd60e51b815260206004820152601f60248201527f41413931206661696c65642073656e6420746f2062656e656669636961727900604482015260640161068e565b3063957122ab61269b6040840184613c7c565b6126a86020860186613960565b6126b6610120870187613c7c565b6040518663ffffffff1660e01b81526004016126d695949392919061437f565b60006040518083038186803b1580156126ee57600080fd5b505afa9250505080156126ff575060015b61275f5761270b6141d0565b806308c379a003612753575061271f6141ec565b8061272a5750612755565b80511561274f57600081604051631101335b60e11b815260040161068e929190613bee565b5050565b505b3d6000803e3d6000fd5b50565b604080516060810182526000808252602082018190529181018290529061278884613032565b9050600061279584613032565b82519091506001600160a01b0381166127ac575080515b602080840151604080860151928501519085015191929165ffffffffffff80831690851610156127da578193505b8065ffffffffffff168365ffffffffffff1611156127f6578092505b5050604080516060810182526001600160a01b03909416845265ffffffffffff92831660208501529116908201529250505092915050565b60405163692e537560e11b81526000908190606090309063d25ca6ea9061285f908a908a908a908a906004016143b5565b6000604051808303816000875af192505050801561289f57506040513d6000823e601f3d908101601f1916820160405261289c919081019061443a565b60015b610149573d8080156128cd576040519150601f19603f3d011682016040523d82523d6000602084013e6128d2565b606091505b5063f9bb41fb60e01b6128e482614493565b6001600160e01b031916146128f857600080fd5b60048101905080806020019051810190612912919061443a565b919550935091506129209050565b9450945094915050565b60005a610f8161293c846110006144ca565b6129469190613cd5565b6129529061c350613bc2565b1092915050565b6000612964826130a3565b805190602001209050919050565b604080518082018252600080825260208083018281526001600160a01b03959095168252819052919091208054600160781b90046001600160701b031682526001015463ffffffff1690915290565b60c081015160e0820151600091908082036129dd575092915050565b6129e982488301613176565b949350505050565b6129fe6020830183613960565b6001600160a01b0316815260208083013590820152608080830135604083015260a0830135606083015260c0808401359183019190915260e0808401359183019190915261010083013590820152366000612a5d610120850185613c7c565b90925090508015612add576014811015612ab95760405162461bcd60e51b815260206004820152601d60248201527f4141393320696e76616c6964207061796d6173746572416e6444617461000000604482015260640161068e565b612ac7601460008385613f38565b612ad091613f62565b60601c60a0840152610d5b565b600060a084015250505050565b60a081015160009081906001600160a01b0316612b08576001612b0b565b60035b60ff16905060008360800151828560600151028560400151010190508360c00151810292505050919050565b60008060005a8551805191925090612b5c8988612b5760408c018c613c7c565b61318e565b60a0820151612b6a43600052565b60006001600160a01b038216612bb2576001600160a01b0383166000908152602081905260409020546001600160701b0316888111612bab57808903612bae565b60005b9150505b606084015160208a0151604051633a871cdd60e01b81526001600160a01b03861692633a871cdd929091612bec918f9187906004016144e1565b60206040518083038160008887f193505050508015612c28575060408051601f3d908101601f19168201909252612c2591810190614366565b60015b612cb257612c346141d0565b806308c379a003612c655750612c486141ec565b80612c535750612c67565b8b81604051602001611efe9190614506565b505b8a604051631101335b60e11b815260040161068e918152604060208201819052601690820152754141323320726576657274656420286f72204f4f472960501b606082015260800190565b95506001600160a01b038216612d5c576001600160a01b038316600090815260208190526040902080546001600160701b0316808a1115612d3f578c604051631101335b60e11b815260040161068e9181526040602082018190526017908201527f41413231206469646e2774207061792070726566756e64000000000000000000606082015260800190565b81546001600160701b031916908a90036001600160701b03161790555b5a85039650505050505094509492505050565b6001600160a01b038216600090815260016020908152604080832084821c80855292528220805484916001600160401b038316919085612dae83613bd5565b909155501495945050505050565b82516060818101519091600091848111612e185760405162461bcd60e51b815260206004820152601f60248201527f4141343120746f6f206c6974746c6520766572696669636174696f6e47617300604482015260640161068e565b60a08201516001600160a01b038116600090815260208190526040902080548784039291906001600160701b031689811015612ea0578c604051631101335b60e11b815260040161068e918152604060208201819052601e908201527f41413331207061796d6173746572206465706f73697420746f6f206c6f770000606082015260800190565b8981038260000160006101000a8154816001600160701b0302191690836001600160701b03160217905550826001600160a01b031663f465c77e858e8e602001518e6040518563ffffffff1660e01b8152600401612f00939291906144e1565b60006040518083038160008887f193505050508015612f4157506040513d6000823e601f3d908101601f19168201604052612f3e919081019061453d565b60015b612fcb57612f4d6141d0565b806308c379a003612f7e5750612f616141ec565b80612f6c5750612f80565b8d81604051602001611efe9190614583565b505b8c604051631101335b60e11b815260040161068e918152604060208201819052601690820152754141333320726576657274656420286f72204f4f472960501b606082015260800190565b909e909d509b505050505050505050505050565b60008082600003612ff557506000928392509050565b600061300084613032565b9050806040015165ffffffffffff164211806130275750806020015165ffffffffffff1642105b905194909350915050565b60408051606081018252600080825260208201819052918101919091528160a081901c65ffffffffffff811660000361306e575065ffffffffffff5b604080516060810182526001600160a01b03909316835260d09490941c602083015265ffffffffffff16928101929092525090565b60608135602083013560006130c36130be6040870187613c7c565b61344f565b905060006130d76130be6060880188613c7c565b9050608086013560a087013560c088013560e08901356101008a013560006131066130be6101208e018e613c7c565b604080516001600160a01b039c909c1660208d01528b81019a909a5260608b019890985250608089019590955260a088019390935260c087019190915260e08601526101008501526101208401526101408084019190915281518084039091018152610160909201905292915050565b60008183106131855781613187565b825b9392505050565b8015610d5b578251516001600160a01b0381163b156131f95784604051631101335b60e11b815260040161068e918152604060208201819052601f908201527f414131302073656e64657220616c726561647920636f6e737472756374656400606082015260800190565b835160600151604051632b870d1b60e11b81526000916001600160a01b037f0000000000000000000000003d2b7f2037de33ea755299cdeae7dc5e0039f1b3169163570e1a3691906132519088908890600401613f97565b60206040518083038160008887f1158015613270573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906132959190613fab565b90506001600160a01b0381166132f75785604051631101335b60e11b815260040161068e918152604060208201819052601b908201527f4141313320696e6974436f6465206661696c6564206f72204f4f470000000000606082015260800190565b816001600160a01b0316816001600160a01b0316146133615785604051631101335b60e11b815260040161068e91815260406020808301829052908201527f4141313420696e6974436f6465206d7573742072657475726e2073656e646572606082015260800190565b806001600160a01b03163b6000036133c45785604051631101335b60e11b815260040161068e91815260406020808301829052908201527f4141313520696e6974436f6465206d757374206372656174652073656e646572606082015260800190565b60006133d36014828688613f38565b6133dc91613f62565b60601c9050826001600160a01b031686602001517fd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d83896000015160a0015160405161343e9291906001600160a01b0392831681529116602082015260400190565b60405180910390a350505050505050565b6000604051828085833790209392505050565b6040518060a001604052806134c760405180610100016040528060006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001600081525090565b8152602001600080191681526020016000815260200160008152602001600081525090565b6000602082840312156134fe57600080fd5b813563ffffffff8116811461318757600080fd5b80356001600160c01b038116811461352957600080fd5b919050565b60006020828403121561354057600080fd5b61318782613512565b6001600160a01b038116811461275f57600080fd5b803561352981613549565b6000806040838503121561357c57600080fd5b823561358781613549565b915061359560208401613512565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60a081018181106001600160401b03821117156135d3576135d361359e565b60405250565b61010081018181106001600160401b03821117156135d3576135d361359e565b601f8201601f191681016001600160401b038111828210171561361e5761361e61359e565b6040525050565b60006001600160401b0382111561363e5761363e61359e565b50601f01601f191660200190565b600081830361018081121561366057600080fd5b60405161366c816135b4565b8092506101008083121561367f57600080fd5b604051925061368d836135d9565b6136968561355e565b8352602085013560208401526040850135604084015260608501356060840152608085013560808401526136cc60a0860161355e565b60a084015260c085013560c084015260e085013560e084015282825280850135602083015250610120840135604082015261014084013560608201526101608401356080820152505092915050565b60008083601f84011261372d57600080fd5b5081356001600160401b0381111561374457600080fd5b60208301915083602082850101111561375c57600080fd5b9250929050565b6000806000806101c0858703121561377a57600080fd5b84356001600160401b038082111561379157600080fd5b818701915087601f8301126137a557600080fd5b81356137b081613625565b6040516137bd82826135f9565b8281528a60208487010111156137d257600080fd5b826020860160208301376000602084830101528098505050506137f8886020890161364c565b94506101a087013591508082111561380f57600080fd5b5061381c8782880161371b565b95989497509550505050565b60008083601f84011261383a57600080fd5b5081356001600160401b0381111561385157600080fd5b6020830191508360208260051b850101111561375c57600080fd5b60008060006040848603121561388157600080fd5b83356001600160401b0381111561389757600080fd5b6138a386828701613828565b90945092505060208401356138b781613549565b809150509250925092565b600080604083850312156138d557600080fd5b82356138e081613549565b946020939093013593505050565b6000610160828403121561390157600080fd5b50919050565b60008082840360a081121561391b57600080fd5b83356001600160401b0381111561393157600080fd5b61393d868287016138ee565b9350506080601f198201121561395257600080fd5b506020830190509250929050565b60006020828403121561397257600080fd5b813561318781613549565b60008060008060006060868803121561399557600080fd5b85356001600160401b03808211156139ac57600080fd5b6139b889838a0161371b565b9097509550602088013591506139cd82613549565b909350604087013590808211156139e357600080fd5b506139f08882890161371b565b969995985093965092949392505050565b60008060208385031215613a1457600080fd5b82356001600160401b03811115613a2a57600080fd5b613a368582860161371b565b90969095509350505050565b600060208284031215613a5457600080fd5b81356001600160401b03811115613a6a57600080fd5b6129e9848285016138ee565b60008060008060608587031215613a8c57600080fd5b8435613a9781613549565b935060208501356001600160401b03811115613ab257600080fd5b613abe8782880161371b565b9598909750949560400135949350505050565b60005b83811015613aec578181015183820152602001613ad4565b50506000910152565b60008151808452613b0d816020860160208601613ad1565b601f01601f19169290920160200192915050565b8315158152826020820152606060408201526000613b426060830184613af5565b95945050505050565b60008060008060608587031215613b6157600080fd5b84356001600160401b0380821115613b7857600080fd5b613b84888389016138ee565b955060208701359150613b9682613549565b9093506040860135908082111561380f57600080fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610da157610da1613bac565b600060018201613be757613be7613bac565b5060010190565b8281526040602082015260006129e96040830184613af5565b634e487b7160e01b600052603260045260246000fd5b6000823561015e19833603018112613c3457600080fd5b9190910192915050565b81810381811115610da157610da1613bac565b801515811461275f57600080fd5b600060208284031215613c7157600080fd5b813561318781613c51565b6000808335601e19843603018112613c9357600080fd5b8301803591506001600160401b03821115613cad57600080fd5b60200191503681900382131561375c57600080fd5b6020815260006131876020830184613af5565b600082613cf257634e487b7160e01b600052601260045260246000fd5b500490565b60008235605e19833603018112613c3457600080fd5b6000808335601e19843603018112613d2457600080fd5b8301803591506001600160401b03821115613d3e57600080fd5b6020019150600581901b360382131561375c57600080fd5b6000808335601e19843603018112613d6d57600080fd5b83016020810192503590506001600160401b03811115613d8c57600080fd5b80360382131561375c57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000610160613de384613dd68561355e565b6001600160a01b03169052565b60208301356020850152613dfa6040840184613d56565b826040870152613e0d8387018284613d9b565b92505050613e1e6060840184613d56565b8583036060870152613e31838284613d9b565b925050506080830135608085015260a083013560a085015260c083013560c085015260e083013560e0850152610100808401358186015250610120613e7881850185613d56565b86840383880152613e8a848284613d9b565b9350505050610140613e9e81850185613d56565b86840383880152613eb0848284613d9b565b979650505050505050565b6040808252810184905260006060600586901b830181019083018783805b89811015613f2157868503605f190184528235368c900361015e19018112613eff578283fd5b613f0b868d8301613dc4565b9550506020938401939290920191600101613ed9565b505050508281036020840152613eb0818587613d9b565b60008085851115613f4857600080fd5b83861115613f5557600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015613f8f5780818660140360031b1b83161692505b505092915050565b6020815260006129e9602083018486613d9b565b600060208284031215613fbd57600080fd5b815161318781613549565b65ffffffffffff818116838216019080821115613fe757613fe7613bac565b5092915050565b8183823760009101908152919050565b868152856020820152600065ffffffffffff8087166040840152808616606084015250831515608083015260c060a083015261403d60c0830184613af5565b98975050505050505050565b80518252602081015160208301526040810151151560408301526000606082015165ffffffffffff8082166060860152806080850151166080860152505060a082015160c060a08501526129e960c0850182613af5565b60006101408083526140b481840189614049565b9150506140ce602083018780518252602090810151910152565b845160608301526020948501516080830152835160a08301529284015160c082015281516001600160a01b031660e0820152908301518051610100830152909201516101209092019190915292915050565b60e08152600061413360e0830187614049565b905061414c602083018680518252602090810151910152565b8351606083015260208401516080830152825160a0830152602083015160c0830152613b42565b634e487b7160e01b600052602160045260246000fd5b6000600385106141a957634e487b7160e01b600052602160045260246000fd5b848252606060208301526141c06060830185613af5565b9050826040830152949350505050565b600060033d11156141e95760046000803e5060005160e01c5b90565b600060443d10156141fa5790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561422957505050505090565b82850191508151818111156142415750505050505090565b843d870101602082850101111561425b5750505050505090565b61426a602082860101876135f9565b509095945050505050565b75020a09a98103837b9ba27b8103932bb32b93a32b21d160551b8152600082516142a6816016850160208701613ad1565b9190910160160192915050565b60006101c08083526142c88184018789613d9b565b9050845160018060a01b03808251166020860152602082015160408601526040820151606086015260608201516080860152608082015160a08601528060a08301511660c08601525060c081015160e085015260e08101516101008501525060208501516101208401526040850151610140840152606085015161016084015260808501516101808401528281036101a0840152613eb08185613af5565b60006020828403121561437857600080fd5b5051919050565b606081526000614393606083018789613d9b565b6001600160a01b0386166020840152828103604084015261403d818587613d9b565b6001600160a01b03851681526060602082018190526000906143da9083018587613d9b565b905082604083015295945050505050565b600082601f8301126143fc57600080fd5b815161440781613625565b60405161441482826135f9565b82815285602084870101111561442957600080fd5b613b42836020830160208801613ad1565b60008060006060848603121561444f57600080fd5b835161445a81613c51565b6020850151604086015191945092506001600160401b0381111561447d57600080fd5b614489868287016143eb565b9150509250925092565b805160208201516001600160e01b031980821692919060048310156144c25780818460040360031b1b83161693505b505050919050565b8082028115828204841417610da157610da1613bac565b6060815260006144f46060830186613dc4565b60208301949094525060400152919050565b6e020a09919903932bb32b93a32b21d1608d1b81526000825161453081600f850160208701613ad1565b91909101600f0192915050565b6000806040838503121561455057600080fd5b82516001600160401b0381111561456657600080fd5b614572858286016143eb565b925050602083015190509250929050565b6e020a09999903932bb32b93a32b21d1608d1b81526000825161453081600f850160208701613ad156fea2646970667358221220e0381f78eda990c5feba8a6aea7c6ad41d6a77b0180491fffd13beb2ee459a1f64736f6c63430008190033"
            },
        }

        entity_deposit_slot_index = ""

        #if there is no paymaster, override the sender's balance for gas estimation
        if(len(user_operation.paymaster_and_data) == 0):
            # override the sender deposit slot on the entrypoint contract with the highest deposit value 10^15 eth
            entity_deposit_slot_index = self.calculate_deposit_slot_index(user_operation.sender_address)
        else:
            entity_deposit_slot_index = self.calculate_deposit_slot_index("0x" + user_operation.paymaster_and_data[:20].hex())

        default_state_overrides[entrypoint]["stateDiff"] = {
            (entity_deposit_slot_index): "0x000000000000000000000000000000000000314dc6448d9338c15b0a00000000" #112 bit allows for 10^15 eth
        }

        params = [
            {
                "from": ZERO_ADDRESS,
                "to": entrypoint,
                "data": call_data,
            },
           "latest",
        ]
        if(bool(default_state_overrides | state_override_set_dict)):
            params.append(default_state_overrides | state_override_set_dict)

        result:Any = await send_rpc_request_to_eth_client(
            self.ethereum_node_url, "eth_call", params
        )

        if ("error" not in result):
            raise ValueError("simulateHandleOpMod didn't revert!")

        elif (
            "execution reverted" not in result["error"]["message"] or
            "data" not in result["error"] or len(result["error"]["data"]) < 10
        ):
            raise ValidationException(
                ValidationExceptionCode.SimulateValidation,
                result["error"]["message"],
            )

        error_data = result["error"]["data"]
        error_selector = str(error_data[:10])
        error_params = error_data[10:]

        error_params_api = []
        if(error_selector == "0x3a803a81"):#SimulationResult
             error_params_api = [
                 "uint256",#verificationGasLimit 
                 "uint48", #validAfter
                 "uint48", #validUntil
                 "uint256",#callGasLimitMax
                 "uint256" #numRounds
            ]
        elif(error_selector == "0x22cf94e6"):#EstimateCallGasContinuation
             error_params_api = [
                "uint256",#minGas
                "uint256",#maxGas
                "uint256" #numRounds
            ]
        elif(error_selector[:10] == "0x59f233d2"):#EstimateCallGasRevertAtMax
             error_params_api = ["bytes"]#revertData
        elif error_selector == "0x220266b6":#FailedOp
            (
                _,
                reason,
            ) = decode_FailedOp_event(error_params)
            raise ValidationException(
                ValidationExceptionCode.SimulateValidation,
                reason,
            )
        elif error_selector == "0x08c379a0":  # Error(string)
            reason = decode(
                ["string"], bytes.fromhex(error_params)
            )  # decode revert message

            raise ValidationException(
                ValidationExceptionCode.SimulateValidation,
                reason[0],
            )
        else:
            raise ValidationException(
                ValidationExceptionCode.SimulateValidation,
                error_params,
            )
        error_params_decoded = decode(
            error_params_api, bytes.fromhex(error_params)
        )

        return error_selector, error_params_decoded

    async def verify_gas_fees_and_get_price(
        self, user_operation: UserOperation, enforce_gas_price_tolerance:int
    ) -> int:
        max_fee_per_gas = user_operation.max_fee_per_gas
        max_priority_fee_per_gas = user_operation.max_priority_fee_per_gas

        block_max_fee_per_gas_op = send_rpc_request_to_eth_client(
            self.ethereum_node_url, "eth_gasPrice"
        )

        tasks_arr = [block_max_fee_per_gas_op]

        if not self.is_legacy_mode:
            block_max_priority_fee_per_gas_op = send_rpc_request_to_eth_client(
                self.ethereum_node_url, "eth_maxPriorityFeePerGas"
            )
            tasks_arr.append(block_max_priority_fee_per_gas_op)

        tasks = await asyncio.gather(*tasks_arr)

        block_max_fee_per_gas_hex = tasks[0]["result"]
        block_max_fee_per_gas = int(tasks[0]["result"], 16)
        block_max_fee_per_gas = math.ceil(block_max_fee_per_gas * (self.max_fee_per_gas_percentage_multiplier/100))
        block_max_fee_per_gas_with_tolerance = math.ceil(block_max_fee_per_gas * (1 - (enforce_gas_price_tolerance/100)))
        block_max_fee_per_gas_with_tolerance_hex = hex(block_max_fee_per_gas_with_tolerance)

        if enforce_gas_price_tolerance < 100:
            if self.is_legacy_mode:
                block_max_priority_fee_per_gas = block_max_fee_per_gas
                if max_fee_per_gas < block_max_fee_per_gas_with_tolerance:
                    raise ValidationException(
                        ValidationExceptionCode.SimulateValidation,
                        f"Max fee per gas is too low. it should be minimum : {block_max_fee_per_gas_with_tolerance_hex}",
                    )

            else:
                block_max_priority_fee_per_gas = int(tasks[1]["result"], 16)
                block_max_priority_fee_per_gas = math.ceil(block_max_priority_fee_per_gas * (self.max_priority_fee_per_gas_percentage_multiplier/100))

                estimated_base_fee = max(
                    block_max_fee_per_gas - block_max_priority_fee_per_gas, 1
                )

                if max_fee_per_gas < estimated_base_fee:
                    raise ValidationException(
                        ValidationExceptionCode.InvalidFields,
                        f"Max fee per gas is too low. it should be minimum the estimated base fee: {hex(estimated_base_fee)}",
                    )
                if max_priority_fee_per_gas < 1:
                    raise ValidationException(
                        ValidationExceptionCode.InvalidFields,
                        f"Max priority fee per gas is too low. it should be minimum : 1",
                    )
                if (
                    min(
                        max_fee_per_gas,
                        estimated_base_fee + max_priority_fee_per_gas,
                    )
                    < block_max_fee_per_gas_with_tolerance
                ):
                    raise ValidationException(
                        ValidationExceptionCode.InvalidFields,
                        f"Max fee per gas and (Max priority fee per gas + estimated basefee) should be equal or higher than : {block_max_fee_per_gas_with_tolerance_hex}",
                    )

        return block_max_fee_per_gas_hex

    async def verify_preverification_gas_and_verification_gas_limit(
        self, 
        user_operation: UserOperation,
        entrypoint: str, 
    ) -> None:
        expected_preverification_gas = await self.get_preverification_gas(
            user_operation, entrypoint,
        )

        if user_operation.pre_verification_gas < expected_preverification_gas:
            raise ValidationException(
                ValidationExceptionCode.SimulateValidation,
                f"Preverification gas is too low. it should be minimum : {hex(expected_preverification_gas)}",
            )

        if user_operation.verification_gas_limit > self.max_verification_gas:
            raise ValidationException(
                ValidationExceptionCode.SimulateValidation,
                f"Verification gas is too high. it should be maximum : {hex(self.max_verification_gas)}",
            )

    async def calc_l1_gas_estimate_optimism(
        self, user_operation: UserOperation, 
        block_number_hex: str,
        latest_block_base_fee: int
    ) -> int:

        user_operations_list = [user_operation.to_list()]

        # currently most bundles contains a singler useroperations
        # so l1 fees is calculated for the full handleops transaction 
        handleops_calldata = encode_handleops_calldata(
            user_operations_list, ZERO_ADDRESS
        )

        optimism_gas_oracle_contract_address = (
            "0x420000000000000000000000000000000000000F"
        )

        function_selector = "0x49948e0e" # getL1Fee
        params = encode(
            ["bytes"], 
            [bytes.fromhex(handleops_calldata[2:])]
        )

        call_data = function_selector + params.hex()

        params = [
            {
                "from": ZERO_ADDRESS,
                "to": optimism_gas_oracle_contract_address,
                "data": call_data,
            },
            block_number_hex,
        ]

        result = await send_rpc_request_to_eth_client(
            self.ethereum_node_url, "eth_call", params
        )

        l1_fee = decode(["uint256"], bytes.fromhex(result["result"][2:]))[0]

        l2_gas_price = min(
            user_operation.max_fee_per_gas,
            user_operation.max_priority_fee_per_gas + latest_block_base_fee
        )
        l2_gas_price = max(1, l2_gas_price) #in case l2_gas_price = 0

        gas_estimate_for_l1 = math.ceil(l1_fee / l2_gas_price)

        return gas_estimate_for_l1

    async def calc_l1_gas_estimate_arbitrum(
        self, user_operation: UserOperation, entrypoint:str
    ) -> int:
        arbitrum_nodeInterface_address = (
            "0x00000000000000000000000000000000000000C8"
        )

        is_init: bool = user_operation.nonce == 0

        user_operations_list = [user_operation.to_list()]

        handleops_calldata = encode_handleops_calldata(
            user_operations_list, ZERO_ADDRESS
        )

        call_data = encode_gasEstimateL1Component_calldata(
            entrypoint, is_init, handleops_calldata
        )

        params = [
            {
                "from": ZERO_ADDRESS,
                "to": arbitrum_nodeInterface_address,
                "data": call_data,
            },
            "latest",
        ]

        result = await send_rpc_request_to_eth_client(
            self.ethereum_node_url, "eth_call", params
        )

        raw_gas_results = result["result"]

        gas_estimate_for_l1 = decode_gasEstimateL1Component_result(
            raw_gas_results
        )

        return gas_estimate_for_l1

    async def get_preverification_gas(
        self,
        user_operation: UserOperation,
        entrypoint: str,
        preverification_gas_percentage_coefficient: int = 100,
        preverification_gas_addition_constant: int = 0,
    ) -> int:
        base_preverification_gas = GasManager.calc_base_preverification_gas(
            user_operation
        )
        l1_gas = 0

        if self.chain_id == 10 or self.chain_id == 420:  # optimism and optimism goerli
            block_number_hex,latest_block_base_fee, _, _,_ = await get_latest_block_info(
                    self.ethereum_node_url)
            l1_gas = await self.calc_l1_gas_estimate_optimism(
                user_operation, block_number_hex, latest_block_base_fee
            )
        elif self.chain_id == 42161:  # arbitrum One
            l1_gas = await self.calc_l1_gas_estimate_arbitrum(user_operation, entrypoint)

        calculated_preverification_gas = base_preverification_gas + l1_gas

        adjusted_preverification_gas = math.ceil(
            (
                calculated_preverification_gas
                * preverification_gas_percentage_coefficient
                / 100
            )
            + preverification_gas_addition_constant
        )

        return adjusted_preverification_gas

    @staticmethod
    def calc_base_preverification_gas(user_operation: UserOperation) -> int:
        user_operation_list = user_operation.to_list()

        user_operation_list[6] = 21000

        #set a dummy signature only if the user didn't supply any
        if(len(user_operation_list[10]) < 65):
            user_operation_list[
                10
            ] = b"\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"  # signature

        fixed = 21000
        per_user_operation = 18300
        per_user_operation_word = 4
        zero_byte = 4
        non_zero_byte = 16
        bundle_size = 1
        # sigSize = 65

        packed = UserOperationHandler.pack_user_operation(
            user_operation_list, False
        )
        packed_length = len(packed)
        zero_byte_count = packed.count(b"\x00")
        non_zero_byte_count = packed_length - zero_byte_count
        call_data_cost = zero_byte_count * zero_byte + non_zero_byte_count * non_zero_byte

        length_in_words = math.ceil((packed_length + 31) /32)
        # cost_list = list(
        #     map(lambda x: zero_byte if x == b"\x00" else non_zero_byte, packed)
        # )
        # call_data_cost = reduce(lambda x, y: x + y, cost_list)

        pre_verification_gas = (
            call_data_cost
            + (fixed / bundle_size)
            + per_user_operation
            + per_user_operation_word * length_in_words
        )

        return math.ceil(pre_verification_gas)

    @staticmethod
    def calculate_deposit_slot_index(address, slot = 0): #deposits is at slot 0
        return "0x" + keccak(
                encode(
                    ["uint256", "uint256"],
                    [int(address, 16), slot]
                )
            ).hex()
